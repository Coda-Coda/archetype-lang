archetype vehicle_lifecycle

asset owner {
  ido : role;
  fn  : string;
  ln  : string;
}

enum order_state =
  | Placed                      initial
  | Scheduled_for_manufacture
  | Vin_assigned
  | Owner_assigned
  | Delivered

asset vehicledetail {
  idv : string
}

asset manufacturer {
  mid : string;
}

asset order {
  oid           : string;
  amanufacturer : pkey of manufacturer;
  orderer       : pkey of owner;
  details       : pkey of vehicledetail;
} with states order_state

enum vehicle_state =
  | Off_the_road               initial
  | Active
  | Scrapped

asset vehicle identified by vin {
   vin          : string;
   aowner       : pkey of owner;
   detail       : pkey of vehicledetail;
} with states vehicle_state

action placeOrder (neworder : order) {
  called by neworder.orderer
  effect {
    order.add(neworder)
  }
}

transition assign_vin (avin : string) (adetail : pkey of vehicledetail) on (ok : pkey of order) from Placed {
  called by order.get(ok).orderer

  to Vin_assigned
  with effect {
     vehicle.add ({ vin = avin; aowner = order.get(ok).orderer; detail = adetail })
  }
}

transition assign_owner on (ok : pkey of order) from any {
  to Owner_assigned
  with effect {
    (* set vehicule state *)
    vehicle.get(order.get(ok)).state := Active;
    (* set vehicule owner *)
    order.get(ok).vehicle.owner := order.orderer
  }
}

action vehiculeTransfer (buyer : owner) (vehicule : vehicule) {
  called by [%delegable%] vehicule.owner
  effect {
    vehicule.owner := buyer
  }
}

transition scrapVehicle on (vk : vehicule) from (Off_the_road or Active) {
  called by vehicle.owner

  to Scrapped
}

action scrapVehiclebyColor (color : string) {
  effect {
    for v in vehicule.select(vehicule.color = color) do
      v.state := Scrapped
    done
  }
}
