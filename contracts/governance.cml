model governance

variable[%transferable] chairperson role

(* vote start *)
variable[%mutable chairperson (instate Created)] date startDate

(* vote deadline *)
variable[%mutable chairperson (instate Created)] date deadline

specification {
  startdate < deadline
}

asset voter as role identified by address = {
  address : address;
  hasVoted : boolean
}

asset ballot identified by value = {
  value   : string;
  nbvotes : uint
}

asset winner = {
  value : string
}

(* state machine *)
states =
 | Created initial
 | Voting
 | Buried

transaction register (voter : address) = {
   called by chairperson
   condition state = Created
   action
     voter.add {address = voter; hasVoted = false}
}

transaction start = {
   condition now > startDate
   transition from Created to Vote
}

transaction vote (val : string) = {
   called by voter
   condition
     c1 : state = Voting;
     c2 : (voter.get (Caller.address)).hasVoted = false

   action
     (voter.get caller).hasVoted := true;
     ballot.update value { nbvotes += 1 } { nbvotes = 0 }
}

transaction bury = {
   condition now > deadline
   transition from Voting to Buried
   action
     let nbvotesMax = ballot.max(nbvotes) in
     for (b in ballot)
       if (b.nbvotes = nbvotesMax)
       then winner.add { value = b.val }
}

specification {
  s1 : (voter.when(voter.hasVoted = true)).count() = ballot.sum(nbvotes);
  s2 : state = Created or state = Voting -> is_empty winner;
  s3 : forall w : winner,
         forall b : ballot,
           b.nbvotes <= ballot.get(w.value).nbvotes
}
