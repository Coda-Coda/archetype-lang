archetype edu_token

asset learner {
  lid : role;
  ltokens : int = 0;
}

asset institution {
  iid : address;
  itokens : int;
  ipubk : string;
  illearners : learner collection = [];
  ittokens : int = 0;
}

asset certifier {
  ccid : address;
}

asset certificate {
  did : string;
  dtkl : int; /* learner */
  dtki : int; /* institution */
}

asset certification {
  cid : string;
  cdate : date;
  cdip : pkey of certificate;
  ccer : pkey of learner;
  ciid : pkey of institution;
}

asset other_token_holder {
  othid : address;
  oth_learner_tokens : int;
  oth_institution_tokens : int;
}


action register_learner (do_add : bool) {
  effect {
   if (do_add) then
   (if (not learner.contains(caller)) then
     learner.add({lid= caller})
   else
     require (false))
   else
   (if (learner.contains(caller)) then
    learner.remove(caller)
   else
     require (false))
  }
}

action register_learners (learners : learner collection) (do_add : bool) {
  effect {
    var i = institution.get(caller);
    for l in learners do
	    if do_add then
        i.illearners.add(l)
	    else
        i.illearners.remove(l.lid)
    done
  }
}


action register_institution (i : institution) (do_add : bool) {
 effect {
   if (do_add) then
     institution.add(i)
   else
     institution.remove(i.iid)
 }
}

action register_certificate (c : certificate) (do_add : bool) {
 effect {
   if (do_add) then
     certificate.add(c)
   else
     certificate.remove(c.did)
 }
}

action register_certifier(c : certifier) (do_add : bool) {
 effect {
   if (do_add) then
     certifier.add(c)
   else
     certifier.remove(c.ccid)
 }
}

action certify(certified : certification collection) {
  require {
    r2: certifier.contains(caller);
  }
  effect {
    for c in certified do

       if (institution.get(c.ciid).illearners.contains(c.ccer)) then
        (* fail ("learner is not in institution"); *)
        require(false); (* TODO *)

       certification.add(c);

       learner.update (c.ccer, {ltokens += certificate.get(c.cdip).dtkl});
       institution.update (c.ciid, {ittokens += certificate.get(c.cdip).dtki})

    done
  }
}

action transfer_learner_token (nb_tokens : int) (dest : address) {
  require {
    r3: learner.contains(caller);
    r4: learner.get(caller).ltokens >= nb_tokens;
    r5: other_token_holder.contains(dest);
  }
  effect {
    learner.update(caller, {ltokens -= nb_tokens});
    other_token_holder.update(dest, {oth_learner_tokens += nb_tokens})
  }
}

action transfer_institution_token (nb_tokens : int) (dest : address) {
  require {
    r6: institution.contains(caller);
    r7: institution.get(caller).ittokens >= nb_tokens;
    r8: other_token_holder.contains(dest);
  }
  effect {
    institution.update(caller, {ittokens -= nb_tokens});
    other_token_holder.update(dest, {oth_institution_tokens += nb_tokens})
  }
}

