model escrow_with_object

variable buyer role

variable[%transferable] debitor role = buyer

variable seller role

variable[%transferable] creditor role = seller

variable oracle role

variable[%traceable] price tez from buyer to creditor

variable[%traceable] [%mutable_signed [buyer, debitor] (instate Created)]
     penalty tez from seller to debitor = 0.1 * price

(* action deadline *)
variable[%mutable (buyer or seller) (state = Created)] deadline date

(* state machine *)
states =
 | Created initial
 | Aborted
 | Confirmed
 | Canceled
 | Transferred

transition abort from Created = {
  called by buyer or seller

  to Aborted
}

transition[%signedbyall [buyer, seller]] confirm from Created = {
  to Confirmed when balance = price + penalty
}

(* type taskStatus = {
     date : date;
     status : string of [ “OK” | “KO” ]
   }
*)
object[%signedby oracle] taskStatus "https://oracle.io/tskstat.schema.json"

transition finalize (task : taskStatus) from any = {
  to Transferred
  when task.date <= deadline and task.status
  with effect (
    transfer price;
    transfer back penalty)

  to Canceled
  with effect (
    transfer penalty;
    transfer back price)
}

specification {
  state = Transferred or state = Canceled -> balance = 0;
  state = Transferred or state = Canceled -> needs oracle;
  state = Transferred -> receives buyer = price
}
