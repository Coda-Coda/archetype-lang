archetype erc20

constant name : string = "mytoken"

constant total : int = 1000
with {
  i0: total > 0
}

asset allowance {
    a_id    : int;
    allowed : address;
    amount  : int;
} with {
    i2 : amount > 0;
}

asset tokenHolder identified by holder {
    holder     : address;
    tokens     : int;
    allowances : allowance collection;
} with {
    i1: tokens >= 0;
    i3: allowances.sum(the.amount) <= tokens;
} initialized by [
  { holder = caller; tokens = total; allowances = [] }
]

action dotransfer (dest : pkey of tokenHolder, value : int) {

  specification {
    p1 : before.tokenHolder.sum(tokens) = tokenHolder.sum(tokens);
    p2 : let some th = tokenHolder.get(dest) in
         let some bth = before.tokenHolder.get(dest) in
         th.tokens = bth.tokens + value
         otherwise true
         otherwise true;
    p3 : let some thc = tokenHolder.get(caller) in
         let some bthc = before.tokenHolder.get(caller) in
         thc.tokens = bthc.tokens - value
         otherwise true
         otherwise true;
    p4 : let some th = tokenHolder.get(dest) in
         forall t in tokenHolder,
         forall bt in before.tokenHolder,
         t.holder <> th.holder ->
         t.holder <> caller ->
         t.tokens = bt.tokens
         otherwise true;
  }

  failif {
    f0 : value < 0;
    f1 : tokenHolder.get(caller).tokens < value
  }

  effect {
    tokenHolder.update( tokenHolder.get(dest).holder, { tokens += value });
    tokenHolder.update( caller, { tokens -= value })
  }
}

action delegate(delegator : address, value : int) {
  effect {
    var allowance_id = 0;

    (* search if allowance exists *)
    var col = tokenHolder.get(caller).allowances.select(allowed = caller);
    if (col.count() > 0) then
      allowance_id := col.nth(0).a_id;

    (* update allowance*)
    if allowance_id = 0 then (
      var a_asset : allowance = {a_id = (allowance.count() + 1); allowed = delegator; amount = value };
      allowance.add(a_asset);
      tokenHolder.get(caller).allowances.add(a_asset)
    ) else (
      allowance.update(allowance_id, {allowed = delegator; amount = value})
    )
  }
}

action doTransfer(from_ : address, dest : address, value : int) {
  require {
    d1: tokenHolder.get(from_).allowances.select(allowed = caller).nth(0).amount >= value
  }
  effect {
    var a_key = tokenHolder.get(from_).allowances.select(allowed = caller).nth(0).a_id;
    allowance.update(a_key, {amount -= value});

    tokenHolder.update( tokenHolder.get(dest).holder, { tokens += value });
    tokenHolder.update( tokenHolder.get(from_).holder, { tokens -= value });
  }
}
