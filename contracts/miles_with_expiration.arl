archetype miles_with_expiration

variable[%transferable%] admin role

(* id is a string because it is generated off-chain *)
asset mile identified by id sorted by expiration = {
   id         : string;
   amount     : uint;
   expiration : date;
} with {
  m1 : amount > 0
}

(* a partition ensures there is no direct access to mile collection *)
asset owner identified by addr = {
  addr  : role;
  miles : mile partition; (* injective (owner x mile) *)
}

action add (ow : address) (newmile : mile) = {
   called by admin

   require {
     c1 : newmile.amount > 0
   }

   effect {
     if owner.contains ow then
      (owner.get ow).miles.add newmile
     else
      owner.add { addr = ow; miles = [newmile] }
   }
}

action consume (a : address) (quantity : uint) = {

  verification {
    assert p1 at zero_remainder = {
      remainder = 0
      invariants for loop {
        0 <= remainder <= to_iter.sum(amount)
      }
    }

    specification p2 = {
      mile.sum(quantity) = before miles.sum(quantity) - nbmiles
      invariants for loop {
        subset (removed miles) (o.miles.select(expiration >= now))
      }
    }

    specification p3 = {
      forall m in removed miles, m.expiration >= now
      invariants for loop {
        before miles.sum(amount) = miles.sum(amount) + nbmiles - remainder
      }
    }

    specification p4 = {
      is_empty added.mile
      invariants for loop {
        is_empty added.mile
      }
    }
  }

  called by admin

  effect {
     let ow = owner.get a in
     let by_expiration = ow.miles.select(mile.expiration > now) in
     require (by_expiration.sum(quantity) >= amount);
     let remainder = quantitiy in
     loop : for (m in by_expiration) (
       if remainder > 0
       then (
         if m.amount > remainder
         then (
           remainder := 0;  (* this should be after instruction below
                               this is to demonstrate verification
                               capacity to not verify contract in this
                               state *)
           mile.update m.id { amount  -= remainder }
         )
         else if m.amount = remainder
         then (
           remainder := 0;
           o.miles.remove m.id
         ) else (
           remainder -= m.amount;
           o.miles.remove m.id
         )
       );
     label zero_remainder)
  }
}

verification {
  (* this ensures that any mile was added with the ‘add’ action *)
  specification g1 = {
    anyaction may be performed only by role admin
  }

  specification g2 = {
    (remove mile) may be performed only by action (consume or clear_expired)
  }

  specification g3 = {
    not ((add mile) may be performed only by action consume)
  }
}

action clear_expired = {
  verification {
    specification s3 = {
      forall m in removed mile, m.expiration < now
    }
  }

  called by admin

  effect {
    for (o in owner) (
      o.miles.removeif (expiration < now)
    )
  }
}
