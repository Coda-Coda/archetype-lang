archetype miles_with_expiration

variable[%transferable%] admin : role = @tz1aazS5ms5cbGkb6FN1wvWmN7yrMTTcr6wB

(* id is a string because it is generated off-chain *)
asset mile identified by id sorted by expiration {
   id         : string;
   amount     : int;
   expiration : date
} with {
  m1 : amount > 0;
}

(* a partition ensures there is no direct access to mile collection *)
asset owner identified by addr {
  addr  : role;
  miles : mile partition (* injective (owner x mile) *)
}

entry add (ow : address, newmile_id : string, newmile_amount : int, newmile_expiration : date) {
   called by admin

   require {
     c1 : newmile_amount > 0;
   }

   failif {
     c2 : mile.contains(newmile_id);
   }

   effect {
     if owner.contains(ow) then
      owner[ow].miles.add ({newmile_id; newmile_amount; newmile_expiration})
     else
      owner.add ({ addr = ow; miles = [{newmile_id; newmile_amount; newmile_expiration}] })
   }
}

entry consume (a : address, quantity : int) {

  specification {

    assert p1 {
      remainder = 0
    }

    postcondition p2 {
      mile.sum(the.amount) = before.mile.sum(the.amount) - quantity
      invariant for loop {
        0 <= remainder <= toiterate.sum(the.amount);
        before.mile.sum(the.amount) = mile.sum(the.amount) + quantity - remainder
      }
    }

    postcondition p3 {
      forall m in removed.mile, m.expiration >= now
      invariant for loop {
        removed.mile.subsetof(by_expiration)
      }
    }

    postcondition p4 {
      added.mile.isempty()
      invariant for loop {
        added.mile.isempty()
      }
    }
  }

  called by admin

  require {
    r2 : quantity >= 0;
  }

  effect {
    let by_expiration = owner[a].miles.select(the.expiration > now) in
    require (by_expiration.sum(the.amount) >= quantity);
    let remainder = quantity in
    for : loop m in by_expiration do
      if remainder > 0
      then (
        if mile[m].amount > remainder
        then (
          mile.update(m, { amount -= remainder });
          remainder := 0
        )
        else if mile[m].amount = remainder
        then (
          remainder := 0;
          owner[a].miles.remove(m)
        ) else (
          remainder -= mile[m].amount;
          owner[a].miles.remove(m)
        )
      )
    done;
    assert p1
  }
}

entry clear_expired () {
  specification {
    postcondition s3 {
      forall m in removed.mile, m.expiration < now
      invariant for loop2 {
        forall m in removed.mile, m.expiration < now
      }
    }
  }

  called by admin

  effect {
    for : loop2 o in owner do
      owner[o].miles.removeif (the.expiration < now)
    done
  }
}

security {
  (*  this ensures that any mile was added with the 'add' action *)
  g1 : only_by_role (anyaction, admin);
  g2 : only_in_action (remove (mile), [consume or clear_expired]);
  g3 : not_in_action (add (mile), consume);
  g4 : no_storage_fail (add)
}
