module Mile_with_expiration_storage
  use archetype3.Lib
  
  type _asset =
   | Mile
   | Owner
  
  type _entry =
   | 
  
  type _field =
   | Id
   | Expiration
   | Addr
   | Miles
  
  clone archetype3.Trace as Tr with type _asset = _asset,
                                    type _entry = _entry,
                                    type _field = _field
  
  type mile = {
    id : string;
    expiration : date 
  }
  
  let function eq_mile (a1 : mile) (a2 : mile) : bool
  =  ((a1.id = a2.id) && (a1.expiration = a2.expiration))
  
  let mk_default_mile () : mile
  =  {
       id = 0;
       expiration = 0
     }
  
  clone archetype3.AssetCollection as Mile with type t = mile,
                                                val keyf = id,
                                                val sortf = id,
                                                val eqf = eq_mile
  
  type owner = {
    addr : address;
    miles : list string 
  }
  
  let function eq_owner (a1 : owner) (a2 : owner) : bool
  =  ((a1.addr = a2.addr) && (eql a1.miles a2.miles))
  
  let mk_default_owner () : owner
  =  {
       addr = 0;
       miles = Nil
     }
  
  clone archetype3.AssetCollection as Owner with type t = owner,
                                                 val keyf = addr,
                                                 val sortf = addr,
                                                 val eqf = eq_owner
  
  lemma mile_extensionality:
    forall a1 a2 : mile.
    eq_mile a1 a2 ->
    a1 = a2 
  
  lemma owner_extensionality:
    forall a1 a2 : owner.
    eq_owner a1 a2 ->
    a1 = a2 
  
  type _storage = {
    mutable _mile_assets : Mile.collection;
    mutable _mile_assets_added : Mile.collection;
    mutable _mile_assets_removed : Mile.collection;
    mutable _owner_assets : Owner.collection;
    mutable _owner_assets_added : Owner.collection;
    mutable _owner_assets_removed : Owner.collection;
    mutable _ops : transfers;
    _balance : tez;
    _transferred : tez;
    _caller : address;
    _now : date;
    _entry : option _entry;
    mutable _tr : Tr._traces 
  } by {
    _mile_assets = Mile.empty;
    _mile_assets_added = Mile.empty;
    _mile_assets_removed = Mile.empty;
    _owner_assets = Owner.empty;
    _owner_assets_added = Owner.empty;
    _owner_assets_removed = Owner.empty;
    _ops = Nil;
    _balance = 0;
    _transferred = 0;
    _caller = 0;
    _now = 0;
    _entry = None;
    _tr = Nil 
  }
  
  val _s : _storage
end
module Mile_with_expiration
  use archetype3.Lib
  
  use list.List
  
  use Mile_with_expiration_storage
end

