theory Fizzy

  use cml3.Contract
  use cml3.Types
  use cml3.Map
  use cml3.Asset
  use int.Int
  use list.List
  use list.Append
  use option.Option
  use list.Mem

  (* TRACES ********************************************************************)

  type entry =
  | Addflightinsurance
  | Updatestatus
  | Manual

  (* asset type is built with asset key value *)
  type asset =
  | Insurance string
  | Flight string

  type field =
  | Limit
  | Premium
  | Indemnity
  | Stat
  | Product
  | Insurances

  type action =
  | Add
  | Rm
  | Get
  | Update field
  | Loop

  type trace = {
    entry : entry;
    asset : asset;
    action : action;
  }

  type traces = list trace

  let mk_trace (e : entry) (a : asset) (c : action) : traces = Cons ({
    entry = e;
    asset = a;
    action = c;
  }) Nil

  predicate action_performed_by (e : env) (tr : traces) (a : action) (p : address) =
    (forall x. Mem.mem x tr -> action x = a -> caller e = p)

  (* ************************************************************************ *)

  type status =
  | Created
  | Before
  | After
  | Cancelled
  | FlightCancelled
  | Redirected
  | Diverted

 type storage = {
           owner        : address;
   (* internal insruance key generator *)
   ikey         : int;
   (* asset key lists  *)
   insurances   : list string;
   flights      : list string;
   (* insurance fields *)
   limit        : map date;
   premium      : map tez;
   indemnity    : map tez;
   stat         : map status;
   productid    : map string;
   (* flight fields *)
   finsurances  : map (list string);
 } (*with { owner = 0; ikey = 0; insurances = Nil; flights = Nil; }*)

 let addflightinsurance  (e   : env)
                         (s   : storage)
                         (fi  : string)
                         (li  : date)
                         (pre : tez)
                         (ind : tez)
                         (pro : string) : (traces, env, storage)
   ensures { let tr,_,_ = result in
             forall a:action. action_performed_by e tr a s.owner  }
   =
   let tr = Nil in
   if caller e = s.owner
   then
     let f = fi in
     let s = { s with
       flights = addifnotexist fi s.flights;
       (* add insurance *)
       insurances = add s.ikey s.insurances;
       limit      = set s.limit f li;
       premium    = set s.premium f pre;
       indemnity  = set s.indemnity f ind;
       stat       = set s.stat f Created;
       productid  = set s.productid f pro;
       (* update finsurance *)
       finsurances = set s.finsurances fi (add s.ikey (get s.finsurances f));
       ikey        = s.ikey + 1
    } in
    let tr = tr ++ mk_trace Addflightinsurance (Insurance (s.ikey-1)) Add in
    let tr = tr ++ mk_trace Addflightinsurance (Flight f) Add in
    (tr,e,s)
  else (tr,e,s)

 let updatestatus (e: {env})
                  (s: {storage})
                  (fk : string)
                  (arrival : date) : (traces, env, storage)
   ensures { let tr,_,_ = result in
             forall a:action. action_performed_by e tr a s.owner }
   diverges =
   let tr = Nil in
   if caller e = s.owner
   then
     let (tr, e, s) = fold (fun acc k ->
       match get s.stat k with
       | Created ->
         let (tr, e, s) = acc in
         if arrival > (get s.limit k)
         then
           let s = { s with
             stat = set s.stat k After
           } in
           let tr = tr ++ mk_trace Updatestatus (Insurance k) (Update Stat) in
           (tr,e,s)
         else acc
       | _ -> acc
       end
     ) (tr, e, s) (get s.finsurances fk) in
     (tr, e, s)
   else (tr, e, s)

 let manual (e  : {env})
            (s  : {storage})
            (fk : string)
            (pr : string)
            (st : status) : (traces, env, storage)
 ensures { let tr,_,_ = result in
           forall a:action. action_performed_by e tr a s.owner }
 diverges =
 let tr = Nil in
 if caller e = s.owner
 then
   let (tr, e, s) =
     fold (fun acc k ->
       match get s.stat k with
       | Created ->
         let s = { s with
          stat = set s.stat k st;
         } in
         let tr = tr ++ mk_trace Manual (Insurance k) (Update Stat) in
         (tr, e, s)
       | _ -> (tr, e, s)
       end
     ) (tr, e, s) (get s.finsurances fk) in
   (tr, e, s)
 else (tr, e, s)

end