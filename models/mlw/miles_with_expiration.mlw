module Miles

  use int.Int
  use ref.Ref
  use option.Option
  use list.List

  use archetype3.Types
  use archetype3.Contract
  use archetype3.Map
  use archetype3.AssetCollection

  type storage = {
    mutable miles            : acol;
    mutable mile_amounts     : map int;
    mutable mile_expirations : map date;
    mutable owners           : acol;
    mutable owner_miles      : map acol;
  }
  
  (* TODO : make this a storage invariant *)
  axiom Amount_gt0 : forall s : storage, m : key. get s.mile_amounts m > 0 

  let function get_mile       (s : storage) (k : key) : key = k
  let function get_amount     (s : storage) (k : key) : int = get s.mile_amounts k
  let function get_expiration (s : storage) (k : key) : date = get s.mile_expirations k

  let function get_owner (s : storage) (o : key) : key = o
  let function get_miles (s : storage) (o : key) : acol  = get s.owner_miles o

  clone archetype3.Sum as Amounts with type     storage = storage,
                                       function f       = get_amount

  (* Owner.miles is a partition of s.miles *)

  axiom Owners_miles_part_1 : forall s : storage, m : key, o : key.
    mem o s.owners ->
    let miles = get_miles s o in
    mem m miles -> mem m s.miles

  axiom Owners_miles_part_2 : forall s : storage, m : key, o : key.
    mem o s.owners ->
    let miles = get_miles s o in
    mem m s.miles -> mem m miles

  let remove_miles (o : key) (m : key) (s:storage) : unit
  requires { mem m s.miles }
  requires { mem o s.owners }
  ensures  { Amounts.sum (old s) (old s).miles = Amounts.sum s s.miles + get_amount (old s) m }
  ensures  { forall x:key. mem x s.miles <-> (mem x (old s).miles /\ x <> m) }
  =
    s.miles <- remove m s.miles;
    let miles = get_miles s o in
    let new_owner_miles = remove m miles in 
    s.owner_miles <- set s.owner_miles o new_owner_miles

  let set_amount (m : key) (a : int) (s : storage) : unit
  requires { mem m s.miles }
  ensures  { Amounts.sum (old s) (old s).miles = Amounts.sum s s.miles - a + get_amount (old s) m }
  ensures { (old s).miles = s.miles }
  = s.mile_amounts <- set s.mile_amounts m a

  (* Transactions  ***********************************************************)

  (* filter generated from template 
  let rec function when (e : env) (s : storage) (c : acol) : acol
  ensures { forall a : key. mem a result <-> <TEST e s a> }
  ensures { subset result c }
  ensures { forall i j : int. i <> j -> not ((nth i result) = (nth j result)) }
  =
  match c with
  | Nil -> Nil
  | Cons a tl ->
    if <TEST e s a>
    then Cons a (when e s tl)
    else when e s tl
  end
  *)
  let rec function filter (e : env) (s : storage) (c : acol) : acol
  variant { c }
  ensures { forall a : key. mem a result -> get_expiration s a > now e }
  ensures { subset result c }
  =
  match c with
  | Nil -> Nil
  | Cons a tl ->
    if get_expiration s a > now e
    then Cons a (filter e s tl)
    else filter e s tl
  end

  let consume (e : env) (s : storage) (owner : address) (nbmiles : int) : transfers
  requires { nbmiles > 0 }
  requires { let o = get_owner s owner in mem o s.owners }
  requires { forall m : key, s : storage. get_amount s m > 0 }
  requires {
     let o = get_owner s owner in
     let miles = get_miles s o in
     let l = filter e s miles in
     Amounts.sum s l >= nbmiles
  }
  (* forall m : removed miles, m.expiration > now *)
  ensures { forall m : key.
     mem m (diff (old s).miles s.miles) ->  get_expiration s m > (now e)
  }
  (* mile.sum(quantity) = before miles.sum(quantity) - nbmiles *)
  ensures { Amounts.sum (old s) (old s).miles = Amounts.sum s s.miles + nbmiles }
  (* is_emtpy add.miles *)
  ensures { is_empty (diff s.miles (old s).miles) }

  = let remainder = ref nbmiles in
    let o = get_owner s owner in
    let miles = get_miles s o in
    let l = filter e s miles in
    try
      for i = 0 to (length l) - 1 do
      (* helps for the membership precondition of set_amount: *)
      invariant { forall k : int. i <= k < length l ->  mem (nth k l) s.miles }
      (* removed miles are in l: *)
      invariant { subset (diff (old s).miles s.miles) l }
      (* remainder bounds: *)
      invariant { 0 <= !remainder <= Amounts.part_sum s l i (length l) }
      (* right amount spent invariant *)
      invariant { Amounts.sum (old s) (old s).miles = Amounts.sum s s.miles + nbmiles - !remainder }
      (* no added mile : TODO replace by trace proof *)
      invariant { is_empty (diff s.miles (old s).miles) }
        let m = nth i l in
        if get_amount s m > !remainder
        then
          (set_amount m (get_amount s m - !remainder) s;
           remainder := 0;
           raise Break)
        else if get_amount s m = !remainder
        then
          (remainder := 0;
           remove_miles o m s;
           raise Break)
        else
          (remainder := !remainder - get_amount s m;
           remove_miles o m s)
      done;
    with Break -> assert { !remainder = 0 }; ()
    end;
    assert { !remainder = 0 };
    Contract.empty

end