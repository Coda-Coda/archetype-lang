module Miles

  use int.Int
  use ref.Ref
  use option.Option
  use list.List
  use set.Fset

  use archetype3.Types
  use archetype3.Contract
  use archetype3.Map
  use archetype3.Asset

  type mile = key
  type owner = key

  type storage = {
    mutable miles            : list mile;
    mutable mile_amounts     : map int;
    mutable mile_expirations : map date;
    mutable owners           : list owner;
    mutable owner_miles      : map (list mile);
  }

  axiom Amount_gt0 : forall s : storage, m : mile. get s.mile_amounts m > 0

  let function get_mile   (s : storage) (k : key)  : mile = k
  let function get_amount (s : storage) (m : mile) : int = get s.mile_amounts m
  let function get_expiration (s : storage) (m : mile) : date = get s.mile_expirations m

  let function get_owner (s : storage) (a : address) : owner = a

  let function get_miles (s : storage) (o : owner) : list mile
  = get s.owner_miles o

  (* Owner.miles is a partition of s.miles *)

  axiom Owners_miles_part_1 : forall s : storage, m : mile, o : owner.
    mem o s.owners ->
    let miles = get_miles s o in
    mem m miles -> mem m s.miles

  axiom Owners_miles_part_2 : forall s : storage, m : mile.
    exists o : owner.
    let miles = get_miles s o in
    mem m s.miles -> mem m miles

  let remove_miles (o : owner) (m : mile) (s:storage) : unit
  requires { mem m s.miles }
  ensures  { sum (old s).miles (get_amount (old s)) =
      (sum s.miles (get_amount s)) + get_amount s m }
  ensures  { forall x:mile. mem x s.miles <-> (mem x (old s).miles /\ x <> m) }
  =
    (*s.miles <- remove m (=) s.miles;*)
    let miles = get_miles s o in
    let new_miles = miles (*remove m (=) miles*) in
    s.owner_miles <- set s.owner_miles o new_miles

  let set_amount (m : mile) (a : int) (s : storage) : unit
  requires { mem m s.miles }
  requires { a > 0 }
  ensures  { sum (old s).miles (get_amount (old s)) =
      (sum s.miles (get_amount s)) - a + get_amount (old s) m }
  ensures { (old s).miles = s.miles }
  = s.mile_amounts <- set s.mile_amounts m a

  (* Transactions  ***********************************************************)

  (* when filter *)
  let function by_expiration (e : env) (s : storage) (m : mile) : bool =
  reads { e, s }
  get_expiration s m > now e

  clone archetype3.When as Expiration   with type     storage = storage,
                                       type     asset   = mile,
                                       val      test    = by_expiration

  let filter (e : env) (s : ref storage) (m : list mile) =
    Expiration.when e !s m

  (* sum of amounts *)
  let function get_coll_amount (s : storage) (c : list mile) (i : int) : int =
    nth i 0 c

  clone archetype3.Sum as Amounts  with type     storage = storage,
                                  type     asset   = mile,
                                  function f       = get_coll_amount

  let consume (e : env) (s : storage) (owner : address) (nbmiles : int) : transfers
  requires { nbmiles > 0 }
  requires { let o = get_owner s owner in mem o s.owners }
  requires { forall m : mile, s : storage. get_amount s m > 0 }
  requires {
     let o = get_owner s owner in
     let miles = get_miles s o in
     let l =  e s miles in
     Amounts.sum l 0 (length l) >= nbmiles
  }
  ensures { forall m:mile.
     Fset.mem m (diff (old s).miles s.miles) -> (*by_expiration e s m*)
     get_expiration s m > (now e)
  }
  ensures { sum (old s).miles (get_amount (old s)) =
            sum s.miles (get_amount s) + nbmiles }

  ensures { Fset.is_empty (diff s.miles (old s).miles) }

  (* archetype 'invariant (mile.project(not mile.amount))) *)
  ensures { forall m : mile. mem m s.miles /\ mem m (old s).miles ->
    get_expiration s m = get_expiration (old s) m }

  = let remainder = ref nbmiles in
    let o = get_owner s owner in
    let miles = get_miles s o in
    let l = filter e (ref s) miles in
    try
      for i = 0 to (length l) - 1 do
      (* helps for the membership precondition of set_amouunt: *)
      invariant { forall k:int. i <= k < length l -> mem (nth k 0 l) s.miles }
      (* removed miles are in l: *)
      invariant {  forall m:mile.
         Fset.mem m (diff (old s).miles s.miles) -> exists k:int. 0 <= k < i /\ (nth k 0 l) = m }
      (* remainder bounds: *)
      invariant { 0 <= !remainder <= Amounts.sum l i (length l) }
      (* right amount spent invariant *)
      invariant { sum (old s).miles (get_amount (old s)) =
        sum s.miles (get_amount s) + nbmiles - !remainder }
      (* no added mile *)
      invariant { Fset.is_empty (diff s.miles (old s).miles) }
        let m = nth i 0 l in
        if get_amount s m > !remainder
        then
          (
          set_amount m (get_amount s m - !remainder) s;
          remainder := 0;
           raise Break)
        else if get_amount s m = !remainder
        then
          (remainder := 0;
           remove_miles o m s;
           raise Break)
        else
          (remainder := !remainder - get_amount s m;
          remove_miles o m s)
      done;
    with Break -> assert { !remainder = 0 }; ()
    end;
    assert { !remainder = 0 };
    Contract.empty

end