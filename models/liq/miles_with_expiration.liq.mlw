use option.Option
use liq.Utils
use liq.Int
use liq.Nat
use liq.Address
use liq.Timestamp
use liq.String
use liq.List
use liq.Map
use liq.Set
use liq.Msg
use liq.Current

type storage = {
  admin : address;
  admin_tmp : address;
  mile_id : list string;
  mile_amount : map string nat;
  mile_expiration : map string timestamp;
  owner_addr : set address;
  owner_miles : map address (list string);
}

let init (s : storage) (admin : address) : storage = {
  admin = admin;
  admin_tmp = admin;
  mile_id = Nil;
  mile_amount = empty_map_str_nat;
  mile_expiration = empty_map_str_tim;
  owner_addr = empty_set_add;
  owner_miles = empty_map_add_strl;
}

let get_admin (s : storage) = s.admin

let get_admin_tmp (s : storage) = s.admin_tmp

let get_mile_id (params : (storage, string)) =
  let s = get_0_2 params in
  let k = get_1_2 params in
  match List.mem (k, s.mile_id) with
  | Some v -> v
  | None -> Current.failwith not_found
  end

let get_mile_amount (params : (storage, string)) =
  let s = get_0_2 params in
  let k = get_1_2 params in
  match Map.find k s.mile_amount with
  | Some v -> v
  | None -> Current.failwith not_found
  end

let get_mile_expiration (params : (storage, string)) =
  let s = get_0_2 params in
  let k = get_1_2 params in
  match Map.find k s.mile_expiration with
  | Some v -> v
  | None -> Current.failwith not_found
  end

let get_owner_miles (params : (storage, address)) =
  let s = get_0_2 params in
  let k = get_1_2 params in
  match Map.find k s.owner_miles with
  | Some v -> v
  | None -> Current.failwith not_found
  end

let get_owner_addr (params : (storage, address)) =
  let s = get_0_2 params in
  let k = get_1_2 params in
  if Set.mem k s.owner_addr
  then k
  else Current.failwith not_found

let owner_addifnotexist (params : (storage, address, list string)) =
  let s = get_0_3 params in
  let k = get_1_3 params in
  let m = get_2_3 params in
  let s =
    if not (Set.mem k s.owner_addr)
    then
      let s = update_storage s s.owner_addr (Set.add k s.owner_addr) in
      s
    else s in
  let s = update_storage s s.owner_miles (Map.add k m s.owner_miles) in
  let s = update_storage s s.mile_id (append (s.mile_id, m)) in
  s
