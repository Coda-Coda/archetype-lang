theory Types

  use int.Int
  use mach.int.UInt32

  (* default type mapping *)
  type role    = int
  type address = int
  type uint    = uint32
  type tez     = uint32
  type date    = int

  constant max_uint : int = UInt32.max_uint32

  exception Break

end

theory Contract

  use Types
  use int.Int
  use mach.int.UInt32
  use list.List
  use list.Append

  (* currency transfer during transaction *)
  type transfer = {
     destination : address;
     amount      : tez;
  }

  type transfers = list transfer

  let empty : transfers = Nil

  type env = {
     mutable balance_ : tez;
     (* transaction env *)
     transferred_     : tez;
     caller_          : address;
     now_             : date;
  }

  function balance (e: env) : tez = e.balance_

  function transferred (e : env) : tez = e.transferred_

  function caller (e : env) : address = e.caller_

  function now (e : env) : date = e.now_

  let update_balance (e : env)
    requires { transferred e + balance e <= max_uint }
    ensures  { balance e = old (balance e) + (transferred e)}
  =
    let sum = e.balance_ + e.transferred_ in
    e.balance_ <- sum

  let exec_transfer (e : env) (a : address) (c : tez) (ops : transfers) : transfers
    requires { c <= balance e }
    ensures  { old (balance e) = (balance e) + c }
  =
    e.balance_ <- e.balance_ - c;
    let transfer = { destination = a; amount = c } in
    ops ++ (Cons transfer Nil)

end

theory Asset

  use set.Fset
  use list.List
  use list.Mem
  use int.Int

  type key

  type sort

  type asset

  function akey (a : asset) : key

  function asort (a : asset) : sort

  predicate kle (k1 k2 : key)

  predicate le (a1 a2 : asset) = kle (akey a1) (akey a2)

  type collection = private {
    ghost mutable coll : set asset;
    ghost mutable keys : set key;
  }

  (* member of collection predicate *)
  function mem (a : asset) (c : collection) : bool

  axiom mem_keys : forall c:collection, a:asset.
       mem a c <-> Fset.mem (akey a) c.keys

  axiom mem_coll : forall c:collection, a:asset.
       mem a c <-> Fset.mem a c.coll

  axiom keys_coll : forall c:collection, a:asset.
       Fset.mem (akey a) c.keys <-> Fset.mem a c.coll

  (* addition of asset *)
  val add (a : asset) (c : collection) : unit
  writes { c.coll }
  writes { c.keys }
  ensures { old (not (Fset.mem (akey a) c.keys)) ->
          c.coll = add a (old c.coll) /\ c.keys = add (akey a) (old c.keys)}

  (* get an asset from asset key *)
  function get (key : key) (c : collection) : asset

  (* get is injective *)
  axiom inj_get : forall k1 k2:key. forall c:collection.
        get k1 c = get k2 c -> k1 = k2

  (* get is surjective *)
  axiom surj_get : forall c:collection, a:asset.
        mem a c -> exists k:key. get k c = a

  clone list.Sorted as Sorted with type t = asset, predicate le = le

  (* filter collection *)
  function when (p : asset -> bool) (c : collection) : list asset

  axiom when_prop : forall c:collection, p:(asset -> bool), a:asset.
        Mem.mem a (when p c) -> p a

  axiom when_sorted : forall c:collection, p:(asset -> bool).
        Sorted.sorted (when p c)

  (* sum over asset collection/list *)
  function to_list (c : collection) : list asset = when (fun _ -> true) c

  function fold_sum (a : int) (f : asset -> int) (l : list asset) : int =
     match l with
     | Nil -> a
     | Cons h tl -> fold_sum (a + f h) f tl
     end

  function sum (f : asset -> int) (c : collection) : int =
    let l = to_list c in
    fold_sum 0 f l

  function sum_list (f : asset -> int) (l : list asset) : int =
    fold_sum 0 f l

  (* fold over asset collection/list *)

end
