theory Types

  use int.Int
  use mach.int.UInt32

  (* default type mapping *)
  type role    = int
  type address = int
  type uint    = uint32
  type tez     = uint32
  type date    = int

  constant max_uint : int = UInt32.max_uint32

  exception Break

end

theory Contract

  use Types
  use int.Int
  use mach.int.UInt32
  use list.List
  use list.Append

  (* currency transfer during transaction *)
  type transfer = {
     destination : address;
     amount      : tez;
  }

  type transfers = list transfer

  let empty : transfers = Nil

  type env = {
     mutable balance_ : tez;
     (* transaction env *)
     transferred_     : tez;
     caller_          : address;
     now_             : date;
  }

  function balance (e: env) : tez = e.balance_

  function transferred (e : env) : tez = e.transferred_

  function caller (e : env) : address = e.caller_

  function now (e : env) : date = e.now_

  let update_balance (e : env)
    requires { transferred e + balance e <= max_uint }
    ensures  { balance e = old (balance e) + (transferred e)}
  =
    let sum = e.balance_ + e.transferred_ in
    e.balance_ <- sum

  let exec_transfer (e : env) (a : address) (c : tez) (ops : transfers) : transfers
    requires { c <= balance e }
    ensures  { old (balance e) = (balance e) + c }
  =
    e.balance_ <- e.balance_ - c;
    let transfer = { destination = a; amount = c } in
    ops ++ (Cons transfer Nil)

end

theory Asset

  use int.Int
  use set.Set
  use map.Map
  use array.Array
  use array.Sorted

  type key

  type sort

  type asset

  function akey (a : asset) : key

  function asort (a : asset) : sort

  predicate kle (k1 k2 : key)

  predicate le (a1 a2 : asset) = kle (akey a1) (akey a2)

  type collection =  set asset

  (* member of collection predicate *)
  function mem (a : asset) (c : collection) : bool = Set.mem a c

  (* addition of asset *)
  let ghost add (a : asset) (c : collection) : collection = Set.add a c

  (* remove from collection *)
  let ghost remove (a : asset) (c : collection) : collection = Set.remove a c;

  (* get an asset from asset key *)
  function get (key : key) (c : collection) : asset

  (* get is injective *)
  axiom Inj_get : forall k1 k2:key. forall c:collection.
        get k1 c = get k2 c -> k1 = k2

  (* get is surjective *)
  axiom Surj_get : forall c:collection, a:asset.
        mem a c <-> exists k:key. get k c = a

  clone array.Sorted as SortedAsset with type elt = asset, predicate le = le

  (* filter collection *)
  function when (p : asset -> bool) (c : collection) : array asset

  axiom When_mem : forall p:(asset -> bool), c:collection, i:int.
    let l = when p c  in
    0 <= i < length l -> mem l[i] c

  axiom When_verify : forall p:(asset -> bool), a:asset, c:collection, i:int.
    let l = when p c in
    0 <= i < length l -> a = l[i] -> p a

  axiom When_sorted : forall p:(asset -> bool), c:collection.
    let l = when p c in
    SortedAsset.sorted l

  (* sum over an array of asset (see sum.Sum) *)
  function sum (array asset) (array asset -> int -> int) int int : int

  axiom Sum_def_empty :
    forall c : array asset, f:array asset -> int -> int, i j : int. j <= i -> sum c f i j = 0

  axiom Sum_def_non_empty :
    forall c: array asset, f:array asset -> int -> int, i j : int.
    i < j -> sum c f i j = f c i + sum c f (i+1) j

  lemma Sum_right_extension:
    forall c : array asset, f:array asset -> int -> int, i j : int.
    i < j -> sum c f i j = sum c f i (j-1) + f c (j-1)

  lemma Sum_transitivity :
    forall c : array asset, f:array asset -> int -> int, i k j : int. i <= k <= j ->
    sum c f i j = sum c f i k + sum c f k j

  lemma Sum_eq :
    forall c1 c2 : array asset, f:array asset -> int -> int, i j : int.
    (forall k : int. i <= k < j -> f c1 k = f c2 k) -> sum c1 f i j = sum c2 f i j

  (* set operations *)
  function diff (a b:collection) : collection = Set.diff a b

  function inter (a b:collection) : collection = Set.inter a b

end
