module Miles

  use int.Int
  use mach.int.UInt32
  use ref.Ref
  use array.Array

  use cml2.Types
  use cml2.Contract

  use set.Set
  use map.Map
  use set.Fset
  use set.FsetComprehension
  use set.FsetSum
  use set.FsetNth

  type mile = key
  type owner = key

  type storage = {
    mutable miles            : set mile;
    mutable mile_amounts     : map mile int;
    mutable mile_expirations : map mile date;
    mutable owners           : set owner;
    mutable owner_miles      : map owner (set mile);
  }

  function get_mile   (s : storage) (k : key)  : mile = k
  function get_amount (s : storage) (m : mile) : int = Map.get s.mile_amounts m
  function get_expiration (s : storage) (m : mile) : date = Map.get s.mile_expirations m

  function get_owner (s : storage) (a : address) : owner = a
  function get_miles (s : storage) (o : owner) : set mile = Map.get s.owner_miles o

  let ghost remove_miles (*(o : owner)*) (m : mile) (s:storage) : unit
  requires { mem m s.miles }
  ensures  { sum (old s).miles (get_amount (old s)) =
      (sum s.miles (get_amount s)) + get_amount s m }
  ensures  { forall x:mile. mem x s.miles <-> (mem x (old s).miles /\ x <> m) }
  = s.miles <- remove m s.miles

  let ghost set_amount (m : mile) (a : int) (s : storage) : unit
  requires { mem m s.miles }
  requires { a > 0 }
  ensures  { sum (old s).miles (get_amount (old s)) =
      (sum s.miles (get_amount s)) - a + get_amount (old s) m }
  ensures { (old s).miles = s.miles }
  = s.mile_amounts <- s.mile_amounts[ m <- a ]

  (* Transactions  ***********************************************************)

  val function filter_by_expiration (s : storage) (d : date) (miles : set mile) : set mile
  reads { s, d, miles }
  ensures { forall m:mile. mem m result -> get_expiration s m > d }
  ensures { subset result miles }

  let ghost consume (e : env) (s : storage) (owner : address) (nbmiles : int) : transfers
  requires { nbmiles > 0 }
  requires {
     let o = get_owner s owner in
     let l = filter_by_expiration s (now e) s.miles in
     sum l (get_amount s) >= nbmiles
  }
  ensures { forall m:mile.
     mem m (diff (old s).miles s.miles) -> get_expiration s m > (now e)
  }
  ensures {
     sum (old s).miles (get_amount (old s)) = (sum s.miles (get_amount s)) + nbmiles
  }
  = let remainder = ref nbmiles in
    (*let o = get_owner s owner in*)
    let l = filter_by_expiration s (now e) s.miles in
    try
       for i = 0 to (cardinal l) - 1 do
       invariant { forall k:int. i <= k < cardinal l -> mem (nth k l) s.miles }
       invariant { subset (diff (old s).miles s.miles) l }
       invariant { forall m:mile.
          mem m (diff (old s).miles s.miles) -> get_expiration s m > (now e)
       }
       invariant { sum (diff (old s.miles) s.miles) (get_amount (old s)) + !remainder = nbmiles }
       invariant { !remainder >= 0 }
          let m = nth i l in
          if get_amount s m > !remainder
          then
             (remainder := 0;
              set_amount m (get_amount s m - !remainder) s;
              raise Break)
          else if get_amount s m = !remainder
          then
             (remainder := 0;
              remove_miles (*o*) m s;
              raise Break)
          else
             (remainder := !remainder - get_amount s m;
              remove_miles (*o*) m s)
       done;
    with Break -> assert { !remainder = 0 }; ()
    end;
    assert { !remainder = 0 };
    Contract.empty

end