module Effect_method_asset_clear_aggregate_storage
  use archetype.Lib
  
  use list.List as L
  
  use archetype.Field as F
  
  use archetype.View as V
  
  type _asset =
   | AO_asset
   | AMy_asset
  
  type _entry =
   | EExec
  
  type _field =
   | FRes
   | FOid
   | F_val
   | FId
   | FValue
   | FCol
  
  clone archetype.Trace as Tr with type _asset = _asset,
                                   type _entry = _entry,
                                   type _field = _field
  
  type o_asset = {
    oid : string;
    _val : int 
  }
  
  let function eq_o_asset_key (k1 : string) (k2 : string) : bool
  =  str_eq k1 k2
  
  let function eq_o_asset (a1 : o_asset) (a2 : o_asset) : bool
  =  (let a1_oid = a1.oid in
     let a2_oid = a2.oid in
     str_eq a1_oid a2_oid && let a1__val = a1._val in
     let a2__val = a2._val in
     a1__val = a2__val)
  
  let mk_default_o_asset () : o_asset
  =  {
       oid = "";
       _val = 0
     }
  
  clone archetype.View as View_o_asset with type tk = string,
                                            val eqk = eq_o_asset_key
  
  clone archetype.Field as Field_o_asset with type tk = string,
                                              val eqk = eq_o_asset_key,
                                              type view = View_o_asset.view,
                                              val vmk = View_o_asset.mk,
                                              val velts = View_o_asset.elts,
                                              val vcontains = View_o_asset.contains
  
  clone archetype.Collection as O_asset with type tk = string,
                                             val eqk = eq_o_asset_key,
                                             type t = o_asset,
                                             val keyt = oid,
                                             val eqt = eq_o_asset,
                                             type view = View_o_asset.view,
                                             val vmk = View_o_asset.mk,
                                             val velts = View_o_asset.elts,
                                             val vcontains = View_o_asset.contains,
                                             type field = Field_o_asset.field,
                                             val felts = Field_o_asset.elts
  
  type my_asset = {
    id : string;
    value : int;
    col : Field_o_asset.field 
  }
  
  let function eq_my_asset_key (k1 : string) (k2 : string) : bool
  =  str_eq k1 k2
  
  let function eq_my_asset (a1 : my_asset) (a2 : my_asset) : bool
  =  (((let a1_id = a1.id in
     let a2_id = a2.id in
     str_eq a1_id a2_id && let a1_value = a1.value in
     let a2_value = a2.value in
     a1_value = a2_value)) && let a1_col = a1.col in
     let a2_col = a2.col in
     Field_o_asset.eq a1_col a2_col)
  
  let mk_default_my_asset () : my_asset
  =  {
       id = "";
       value = 0;
       col = Field_o_asset.empty
     }
  
  clone archetype.View as View_my_asset with type tk = string,
                                             val eqk = eq_my_asset_key
  
  clone archetype.Field as Field_my_asset with type tk = string,
                                               val eqk = eq_my_asset_key,
                                               type view = View_my_asset.view,
                                               val vmk = View_my_asset.mk,
                                               val velts = View_my_asset.elts,
                                               val vcontains = View_my_asset.contains
  
  clone archetype.Collection as My_asset with type tk = string,
                                              val eqk = eq_my_asset_key,
                                              type t = my_asset,
                                              val keyt = id,
                                              val eqt = eq_my_asset,
                                              type view = View_my_asset.view,
                                              val vmk = View_my_asset.mk,
                                              val velts = View_my_asset.elts,
                                              val vcontains = View_my_asset.contains,
                                              type field = Field_my_asset.field,
                                              val felts = Field_my_asset.elts
  
  lemma o_asset_extensionality:
    forall a1 a2 : o_asset.
    eq_o_asset a1 a2 ->
    a1 = a2 
  
  lemma my_asset_extensionality:
    forall a1 a2 : my_asset.
    eq_my_asset a1 a2 ->
    a1 = a2 
  
  let function get_o_asset_sum1 (a : o_asset) : int
  =  a._val
  
  clone archetype.Sum as O_assetSum1 with type collection = O_asset.collection,
                                          type view = View_o_asset.view,
                                          type t = o_asset,
                                          type tk = string,
                                          val field = get_o_asset_sum1,
                                          val get = O_asset.get,
                                          val elts = View_o_asset.elts,
                                          val mk = View_o_asset.mk,
                                          val card = View_o_asset.card
  
  type _storage = {
    mutable res : int;
    mutable _o_asset_assets : O_asset.collection;
    mutable _o_asset_assets_added : O_asset.collection;
    mutable _o_asset_assets_removed : O_asset.collection;
    mutable _my_asset_assets : My_asset.collection;
    mutable _my_asset_assets_added : My_asset.collection;
    mutable _my_asset_assets_removed : My_asset.collection;
    mutable _ops : L.list operation;
    mutable _balance : tez;
    _transferred : tez;
    _caller : address;
    _source : address;
    _now : date;
    _chainid : chain_id;
    _selfaddress : address;
    _entry : option _entry;
    mutable _tr : Tr._traces 
  } invariant {
    [@expl:s0]
    (View_o_asset.card (O_asset.to_view _o_asset_assets)) = 0 
  }
  invariant {
    [@expl:s1]
    (O_assetSum1.sum_formula _o_asset_assets) = 0  
  } by {
    res = 0;
    _o_asset_assets = O_asset.from_list (L.Nil);
    _o_asset_assets_added = O_asset.empty;
    _o_asset_assets_removed = O_asset.empty;
    _my_asset_assets = My_asset.from_list (L.Cons ({
      id = "id0";
      value = 0;
      col = Field_o_asset.empty
    }) (L.Cons ({
      id = "id1";
      value = 1;
      col = Field_o_asset.empty
    }) (L.Cons ({
      id = "id2";
      value = 2;
      col = Field_o_asset.empty
    }) (L.Nil))));
    _my_asset_assets_added = My_asset.empty;
    _my_asset_assets_removed = My_asset.empty;
    _ops = L.Nil;
    _balance = 0;
    _transferred = 0;
    _caller = "";
    _source = "";
    _now = 0;
    _chainid = 0;
    _selfaddress = "";
    _entry = None;
    _tr = L.Nil 
  }
  
  val _s : _storage
  
  let get_o_asset (k : string) : o_asset
  raises { NotFound ->
           (O_asset.get k _s._o_asset_assets) = None  }
  ensures {
    [@expl:get_o_asset_post_1]
    (O_asset.get k _s._o_asset_assets) = (Some result) 
  }
  ensures {
    [@expl:get_o_asset_post_2]
    result.oid = k  
  }
  =  match O_asset.get k _s._o_asset_assets with
     | Some e -> e
     | _ -> raise NotFound 
     end
  
  let clear_view_o_asset (v : View_o_asset.view) : unit
  =  for i = 0 to View_o_asset.card v do
     
       match View_o_asset.nth i v with
       | Some k -> remove_o_asset k
       | _ -> () 
       end
     done
  
  let get_my_asset (k : string) : my_asset
  raises { NotFound ->
           (My_asset.get k _s._my_asset_assets) = None  }
  ensures {
    [@expl:get_my_asset_post_1]
    (My_asset.get k _s._my_asset_assets) = (Some result) 
  }
  ensures {
    [@expl:get_my_asset_post_2]
    result.id = k  
  }
  =  match My_asset.get k _s._my_asset_assets with
     | Some e -> e
     | _ -> raise NotFound 
     end
end
module Effect_method_asset_clear_aggregate
  use archetype.Lib
  
  use list.List as L
  
  use Effect_method_asset_clear_aggregate_storage
  
  let exec () : unit
  raises { NotFound }
  requires {
    [@expl:entry_require]
    _s._entry = (Some EExec) 
  }
  requires {
   [@expl:empty_trace]
   _s._tr = L.Nil  
  }
  =  clear_view_o_asset (Field_o_asset.to_view (get_my_asset "id0").col)
end

