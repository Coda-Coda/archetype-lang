model vehicle_lifecycle

asset owner as role = {
  fn : string;
  ln : string
}

states order_state =
  | Placed                      initial
  | Scheduled_for_manufacture
  | Vin_assigned
  | Owner_assigned
  | Delivered

asset vehicledetail = {
  id : string
}

asset order = {
   status       : order_sate;
   manufacturer : manufacturer;
   orderer      : owner;
   details      : vehicledetail
}

states vehicle_state =
  | Off_the_road               initial
  | Active
  | Scrapped

asset vehicle identified by vin = {
   vin          : string;
   status       : vehicle_state;
   owner        : owner;
   detail       : vehicledetail;
   color        : string
}

transaction placeOrder (neworder : order) = {
   called by neworder.orderer
   action order.add neworder
}

transaction assign_vin (order : order) (vin : string) (detail : vehicledetail) = {
   called by order.orderer
   transition from order.Placed to order.Vin_assigned
   action
     vehicule.add { vin = vin; detail = detail }
}

transaction assign_owner (order : order) = {
   transition from order.any to order.Owner_assigned
   action
     (* set vehicule state *)
     order.vehicule.state := Active;
     (* set vehicule owner *)
     order.vehicule.owner := order.orderer
}

transaction vehiculeTransfer (buyer : owner) (vehicule : vehicule) = {
   called by [%delegable] vehicule.owner
   action vehicule.owner := buyer
}

transaction scrapVehicle (vehicule : vehicule) = {
   called by vehicle.owner
   transition from (Off_the_road or Active) to Scrapped
}

transaction scrapVehiclebyColor (color : string) = {
   action
     for (v in vehicule.when (vehicule.color = color)) (
        v.state := Scrapped
     )
}
