archetype lang_formula_asset_api

asset my_asset identified by id {
  id : string;
  value : int;
} initialized by {
  {"id0"; 0};
  {"id1"; 1};
  {"id2"; 2}
}

action exec () {

  specification {
    (* quantifiers *)
    q1: forall x : int, x = x;
    q2: forall x in my_asset, x.value = x.value;
    q3: exists x : int, x = x;
    q4: exists x in my_asset, x.value = x.value;

    (* formula operators *)
    o1: true -> true;  (* Mimply *)
    o2: true <-> true; (* Mequiv *)

    (* formula asset collection *)
    s1: before.my_asset.isempty();       (* Msetbefore *)
    s2: at(lbl).my_asset.isempty();      (* Msetat *)
    s3: my_asset.unmoved.isempty();      (* Msetunmoved *)
    s4: my_asset.added.isempty();        (* Msetadded *)
    s5: my_asset.removed.isempty();      (* Msetremoved *)

    (* formula asset collection methods *)
    f01: let some a = my_asset.optget("id0") in true otherwise false;      (* Mapifget      *)
    f02: my_asset.subsetof(my_asset);                                      (* Mapifsubsetof *)
    f03: my_asset.isempty();                                               (* Mapifisempty  *)
    f04: my_asset.select(the.value > 0).isempty();                         (* Mapifselect   *)
    f05: my_asset.sort(the.value).isempty();                               (* Mapifsort     *)
    f06: my_asset.contains(my_asset_id);                                   (* Mapifcontains *)
    f07: let some a = my_asset.optnth(0) in a.value = 0 otherwise false;   (* Mapifnth      *)
    f08: my_asset.count() = 0;                                             (* Mapifcount    *)
    f09: my_asset.sum(the.value) = 0;                                      (* Mapifsum      *)
    f10: let some a = my_asset.optmax(the.value) in a = 0 otherwise false; (* Mapifmax      *)
    f11: let some a = my_asset.optmin(the.value) in a = 0 otherwise false; (* Mapifmin      *)
    f12: let some a = my_asset.opthead(2) in true otherwise false;         (* Mapifhead     *)
    f13: let some a = my_asset.opttail(2) in true otherwise false;         (* Mapiftail     *)

  }

  effect {
    my_asset.add({"id3"; 3});
    label lbl;
    my_asset.add({"id4"; 3});
  }
}


action exec2 () {
  specification {
    postcondition p1 {
      true
      invariant for loop {
         iterated.isempty() (* Msetiterated *)
      }
    }

    postcondition p1 {
      true
      invariant for loop {
         toiterate.isempty() (* Msettoiterate *)
      }
    }
  }

  effect {
    var res : int = 0;
    for:loop i in my_asset do
      res += 1;
    done
  }
}