model miles_with_expiration

role admin

role owner

role[%transferable] validator

asset mile identified by id = {
   id         : string;
   amount     : uint;
   expiration : date;
   owner      : owner;
}

transaction add = {
   args = {
     mile : mile;
   }
   called by validator;
   action : mile.add token;
}

transaction consume = {
  args = {
     owner : owner;
     val : uint;
  }
  called by validator;

  condition :
     mile.when(owner = owner and expiration > now).sum(amount) >= val;

  ensure : forall m : removed.mile,
             m.owner = owner and m.expiration >= now;

  ensure : before.mile.when(owner = owner).sum(amount) =
            after.mile.when(owner = owner).sum(amount) + val;

  ensure : is_empty added.mile;

  ensure : invariant stable.mile.when(owner = owner).proj_other( amount );

  ensure : invariant stable.mile.when(owner <> owner);

  ensure : forall m : removed.mile,
             forall o : stable.mile,
                m.expiration <= o.expiration;

  action :
     let remainder = val in
     for (m in mile.when(owner = owner and expiration >= now)
                    .sort(asc(expiration))) {
          if (m.amount >= remainder)
          then {
             m.amount  -= remainder,
             remainder := 0,
             break
          } else {
             remainder -= m.amount,
             mile.remove t
          }
     },
     assert (remainder = 0);
}

transaction clear_expired = {
  called by admin;

  ensure : forall m : removed.mile, m.expiration < now;

  ensure : is_empty added.mile;

  ensure : invariant stable.mile;

  action : mile.removeif (expiration < now);
}
