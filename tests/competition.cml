model competition

role[%transferable] organiser

(* start date *)
variable[%mutable organiser (instate Created)] startdate date

(* deadline *)
variable[%mutable organiser (instate Created)] deadline date

variable[%traceable] prize xtz from organizer := 3500

role competitor

role oracle

asset submission = {
  competitor : competitor;
  score      : uint;
  date       : date
}

(* state machine *)
states =
 | Created initial
 | InProgress
 | Done
 | Closed

transaction confirm = {
   condition now > startdate
   transition from Created to InProgress
}

transaction submit (competitor : competitor) (score[%signedby oracle] : uint) = {
   condition state = InProgress
   action
     submission.add { competitor = competitor;
                      score = score;
                      date = now }
}

transaction decide = {

  condition now > deadline
  transition from InProgress to Done
  action
    let submissions = submission.sort(asc(date)).sort(desc(score)) in
      if submissions.count() >= 3
      then (
        let first = submissions.nth(0) in
        let second = submissions.nth(1) in
        let third = submissions.nth(2) in
        let q1 = 0.5 * prize in
        let q2 = 0.3 * prize in
        let q3 = 0.2 * prize in
        transfer q1 to first.competitor;
        transfer q2 to second.competitor;
        transfer q3 to third.competitor;
        transfer (prize - q1 - q2 - q3) to organizer)
        else if (submissions.count() >= 2)
             then (
               let first = submissions.nth(0) in
               let second = submissions.nth(1) in
               let q1 = 0.6 * prize in
               let q2 = 0.4 * prize in
               transfer q1 to first.competitor;
               transfer q2 to second.competitor;
               transfer (prize - q1 - q2) to organizer)
             else if (submissions.count() >= 1)
               then (
                 let first = submissions.nth(0) in
                 transfer prize to first.competitor)
               else transfer back prize
}

specification {
  state = Done -> balance = 0
}
