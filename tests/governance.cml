model governance

role[%transferable] chairperson

(* vote start *)
value date[%mutable chairperson (instate Created)] startDate

(* vote deadline *)
value date[%mutable chairperson (instate Created)] deadline

assert (startdate < deadline)

asset voter as role identified by address {
  address : address;
  hasVoted : boolean;
}

asset ballot identified by value {
  value   : string;
  nbvotes : uint;
}

asset winner {
  value : string;
}

(* state machine *)
states
 | Created initial
 | Voting
 | Buried

transaction register = {
   args : {
     voter : address;
   }
   called by   chairperson;
   condition : instate Created;
   action    : voter.add {address = voter; hasVoted = false;};
}
transition start from Created to Vote {
   condition : after startDate;
}

transaction vote = {
   args : {
     value : string;
   }
   called by voter;
   condition : instate Voting
               and (voter.get (Caller.address)).hasVoted = false;

   action    : (voter.get (Caller.address)).hasVoted := true,
               ballot.update value { nbvotes += 1 } { nbvotes = 0 }
}

transition bury from Voting to Buried {
   condition : after deadline;
   action    : let nbvotesMax = ballot.max(nbvotes) in
               for (b in ballot)  {
                 if (b.nbvotes = nbvotesMax) {
                    winner.add {value = b.value}
                 }
               }
}

assert (voter.when(voter.hasVoted = true).count() = ballot.sum(nbvotes))

assert (or (instate Create) (instate Voting) -> is_empty winner)

assert (forall w : winner,
          forall b : ballot,
            b.nbvotes <= ballot.get(w.value).nbvotes)
