(* ------------------------------------------------------------------------ *)
module Undup
use int.Int
use export list.List
use export list.Length
use export list.Mem
use export list.Distinct

function undup (xs : list 'a) : list 'a =
  match xs with
  | Nil ->
      Nil
  | Cons x xs ->
      if mem x xs then undup xs else Cons x (undup xs)
  end

lemma length_undup :
  forall xs [@induction] : list 'a. length (undup xs) <= length xs

lemma mem_undup :
  forall xs [@induction] : list 'a. forall x.
    mem x xs <-> mem x (undup xs)

lemma distinct_undup :
  forall xs [@induction] : list 'a. distinct (undup xs)
end

(* ------------------------------------------------------------------------ *)
module ListFilter
use int.Int
use export list.List
use export list.Mem
use export list.Length

function filter (p : 'a -> bool) (xs : list 'a) : list 'a =
  match xs with
  | Nil ->
      Nil
  | Cons y ys ->
      if p y then Cons y (filter p ys) else filter p ys
  end
  
lemma length_filter :
  forall p. forall xs [@induction] : list 'a.
    length (filter p xs) <= length xs
    
lemma mem_filter :
  forall p. forall xs [@induction] : list 'a. forall x.
    mem x (filter p xs) <-> (mem x xs /\ p x)
end

(* ------------------------------------------------------------------------ *)
theory FSet

(* ------------------------------------------------------------------------ *)
use list.ListRich
use list.Distinct
use list.Quant
use ListFilter
use Undup

(* ------------------------------------------------------------------------ *)
type t

(* ------------------------------------------------------------------------ *)
val function eqt : t -> t -> bool

(* ------------------------------------------------------------------------ *)
axiom eqP : forall x y. eqt x y <-> x = y

(* ------------------------------------------------------------------------ *)
val function norm (xs : list t) : list t

(* ------------------------------------------------------------------------ *)
predicate normed (xs : list t) =
  norm xs = xs

(* ------------------------------------------------------------------------ *)
axiom normP : forall xs. permut (undup xs) (norm xs)
axiom normK : forall xs. norm (norm xs) = norm xs

(* ------------------------------------------------------------------------ *)
type fset = {
  contents : list t;
} invariant {
  normed contents
} by { contents = Nil }

(* ------------------------------------------------------------------------ *)
predicate fmem (x : t) (s : fset) =
  mem x s.contents

(* ------------------------------------------------------------------------ *)
let function mk (xs : list t) : fset =
  { contents = norm xs; }

(* ------------------------------------------------------------------------ *)
lemma mem_mk :
  forall xs x. fmem x (mk xs) <-> mem x xs

(* ------------------------------------------------------------------------ *)
function fset0 : fset =
  mk Nil

(* ------------------------------------------------------------------------ *)
function fsetU (s1 s2 : fset) : fset =
  mk (s1.contents ++ s2.contents)

(* ------------------------------------------------------------------------ *)
function fsetI (s1 s2 : fset) : fset =
  mk (filter (fun x -> Quant.mem eqt x s2.contents) s1.contents)

(* ------------------------------------------------------------------------ *)
function fsetD (s1 s2 : fset) : fset =
  mk (filter (fun x -> not (Quant.mem eqt x s2.contents)) s1.contents)

(* ------------------------------------------------------------------------ *)
function fcard (s : fset) : int =
  length s.contents

(* ------------------------------------------------------------------------ *)
axiom qmemP : forall eq : 'a -> 'a -> bool. forall x xs.
      Quant.mem eq x xs
  <-> exists y. eq x y /\ mem y xs

(* ------------------------------------------------------------------------ *)
lemma qmem_memP :
  forall xs ys z.
        mem z (filter (fun x -> Quant.mem eqt x xs) ys)
    <-> (mem z xs /\ mem z ys)

(* ------------------------------------------------------------------------ *)
lemma qmem_memNP :
  forall xs ys z.
        mem z (filter (fun x -> not (Quant.mem eqt x xs)) ys)
    <-> (not (mem z xs) /\ mem z ys)

(* ------------------------------------------------------------------------ *)
lemma in_fset0 :
  forall x. not (fmem x fset0)

(* ------------------------------------------------------------------------ *)
lemma in_fsetU :
  forall x s1 s2. (fmem x (fsetU s1 s2)) <-> (fmem x s1 \/ fmem x s2)

(* ------------------------------------------------------------------------ *)
lemma in_fsetI :
  forall x s1 s2. (fmem x (fsetI s1 s2)) <-> (fmem x s1 /\ fmem x s2)

(* ------------------------------------------------------------------------ *)
lemma in_fsetD :
  forall x s1 s2. (fmem x (fsetD s1 s2)) <-> (fmem x s1 /\ not (fmem x s2))

end
